/*
 * SPDX-FileCopyrightText: 2022-2023 Espressif Systems (Shanghai) CO LTD
 *
 * SPDX-License-Identifier: Apache-2.0
 */

 #include <stdio.h>
 #include <stdint.h>
 #include <stddef.h>
 #include <string.h>
 #include <ctype.h>
 #include "esp_system.h"
 #include "nvs_flash.h"
 #include "esp_event.h"
 #include "esp_netif.h"
 #include "protocol_examples_common.h"
 #include "esp_log.h"
 #include "mqtt_client.h"
 
 static const char *TAG = "MQTT_TokenTracker";
 
 // Stockage du token local
 static uint8_t token[8] = {0};  
 static bool token_initialized = false;  
 
 /**
  * @brief Affiche le token en ASCII si possible.
  */
 static void print_token_ascii(const uint8_t *token, size_t len) {
     char ascii_repr[9];  // Un byte de plus pour le null-terminator
     for (size_t i = 0; i < len; i++) {
         ascii_repr[i] = isprint(token[i]) ? token[i] : '.';  // Remplace les caractères non imprimables par '.'
     }
     ascii_repr[len] = '\0';  // Ajoute le null-terminator
     ESP_LOGI(TAG, "Token ASCII : %s", ascii_repr);
 }
 
 /**
  * @brief Met à jour le token et l'affiche s'il a changé.
  *
  * @param new_token Donnée reçue du serveur MQTT.
  * @param len Taille des données reçues.
  */
 static void update_token(const uint8_t *new_token, size_t len) {
     if (len != 8) {
         ESP_LOGW(TAG, "Token invalide (taille recue: %d, attendu: 8)", len);
         return;
     }
 
     if (memcmp(token, new_token, 8) != 0 || !token_initialized) {
         memcpy(token, new_token, 8);
         token_initialized = true;
         ESP_LOGI(TAG, "Nouveau token recu");
         ESP_LOG_BUFFER_HEX(TAG, token, 8);
         print_token_ascii(token, 8);
     }
 }
 
 /**
  * @brief Gestionnaire d'événements MQTT
  */
 static void mqtt_event_handler(void *handler_args, esp_event_base_t base, int32_t event_id, void *event_data) {
     esp_mqtt_event_handle_t event = event_data;
     esp_mqtt_client_handle_t client = event->client;
     int msg_id;
 
     switch ((esp_mqtt_event_id_t)event_id) {
     case MQTT_EVENT_CONNECTED:
         ESP_LOGI(TAG, "Connecte au broker MQTT");
 
         // S'abonner au topic "SALAD"
         msg_id = esp_mqtt_client_subscribe(client, "SALAD", 1);
         ESP_LOGI(TAG, "Abonnement a SALAD envoye, msg_id=%d", msg_id);
         break;
 
     case MQTT_EVENT_DISCONNECTED:
         ESP_LOGI(TAG, "Deconnecte du broker MQTT");
         break;
 
     case MQTT_EVENT_DATA:
         ESP_LOGI(TAG, "Nouveau message MQTT recu");
         ESP_LOGI(TAG, "Topic: %.*s", event->topic_len, event->topic);
 
         // Vérifier si le message vient de "SALAD"
         if (strncmp(event->topic, "SALAD", event->topic_len) == 0) {
             update_token((const uint8_t *)event->data, event->data_len);
         }
         break;
 
     case MQTT_EVENT_ERROR:
         ESP_LOGI(TAG, "Erreur MQTT detectee");
         break;
 
     default:
         ESP_LOGI(TAG, "Autre evenement recu: %d", event->event_id);
         break;
     }
 }
 
 /**
  * @brief Initialise et démarre le client MQTT
  */
 static void mqtt_app_start(void) {
     esp_mqtt_client_config_t mqtt_cfg = {
         .broker.address.uri = CONFIG_BROKER_URL,
         .session.protocol_ver = MQTT_PROTOCOL_V_5,
         .network.disable_auto_reconnect = false,
     };
 
     esp_mqtt_client_handle_t client = esp_mqtt_client_init(&mqtt_cfg);
     esp_mqtt_client_register_event(client, ESP_EVENT_ANY_ID, mqtt_event_handler, NULL);
     esp_mqtt_client_start(client);
 }
 
 /**
  * @brief Fonction principale de l'application
  */
 void app_main(void) {
     ESP_LOGI(TAG, "Demarrage de l'ap plication...");
     ESP_LOGI(TAG, "IDF Version: %s", esp_get_idf_version());
 
     ESP_ERROR_CHECK(nvs_flash_init());
     ESP_ERROR_CHECK(esp_netif_init());
     ESP_ERROR_CHECK(esp_event_loop_create_default());
 
     ESP_ERROR_CHECK(example_connect());
 
     mqtt_app_start();
 }
 